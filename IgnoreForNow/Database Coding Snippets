/**
 * Class representing a DataBase reader.
 * @author Group 8 (BZDKEE001; FYTTAN001; HTHHAR001; HDGTIM003; KRLJAM001)
 */
import java.sql.*;
import java.util.Scanner;
import java.util.LinkedList;
import java.util.Arrays;

public class DatabaseReader
{
    private static final String DRIVER = "com.mysql.jdbc.Driver";
    private static final String URL = "jdbc:mysql://localhost:3306/MatricUniDB";
    private static final String USERNAME = "dbReader";
    private static final String PASSWORD = "dbReader";
    private static Connection connection = null;
    private static Statement statement = null;
    
    /**
     * Method runs query and returns a result set.
     * @param query Query to run.
     * @return Returns ResultSet obtained from running query.
     */
    private static ResultSet runQuery(String query)
    {
        ResultSet temp = null;
        try
        {
            statement = connection.createStatement();
            temp =  statement.executeQuery(query);
        }
        catch (SQLException se)
        {
            se.printStackTrace();    
        }
        return temp;   
    }
    

    /**
     * Method runs query and returns a result set.
     * @param update_query Query to update table.
     * @return Returns the number of updated rows from running query.
     */
    private static int runUpdate(String update_query)
    {
        int temp = 0;
        try
        {
            statement = connection.createStatement();
            temp =  statement.executeUpdate(update_query);
        }
        catch (SQLException se)
        {
            se.printStackTrace();    
        }
        return temp;   
    }

    /**
     * Prints Matric students.
     */
    public static void printMatricStudents() //A
    {
        try
        {
            ResultSet result = runQuery("SELECT * FROM Matric;");
            
            while (result.next())
            {
                
                System.out.println("StuID: " + result.getString(1));
                System.out.println("Prefix: " + result.getString(2));
                System.out.println("FirstName: " + result.getString(3));
                System.out.println("LastName: " + result.getString(4));
                System.out.println("Gender: " + result.getString(5));
                System.out.println("CitizenshipStatus: " + result.getString(6));
                System.out.println("SchoolName: " + result.getString(7));
                System.out.println("SchoolCode: " + result.getString(8));
                System.out.println("MatricYear: " + result.getString(9).substring(0,4));
                System.out.println("ExaminingAuthority: " + result.getString(10));
                System.out.println("OldExAuth: " + result.getString(11));
                System.out.println("UCTScore: " + result.getString(12));
                System.out.println();
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }    
    }
    
    /**
     * Print schools.
     */
    public static void printSchools() //B
    {
        try
        {
            ResultSet result = runQuery("SELECT SchoolCode, SchoolName, ExaminingAuthority, OldExAuth FROM Matric;");
        
            String schoolCode;
            String schoolName;
            String examiningAuthority;
            String oldExAuth;
        
            while (result.next())
            {     
                System.out.println("SchoolCode: " + result.getString(1));
                System.out.println("SchoolName: " + result.getString(2));
                System.out.println("ExaminingAuthority: " + result.getString(3));
                System.out.println("OldExAuth: " + result.getString(4));
                System.out.println();
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints matric students with top 10 UCT Scores.
     */
    public static void printTop10UCTScores() //C
    {
        try
        {
            ResultSet result = runQuery("SELECT * FROM Matric ORDER BY UCTScore DESC LIMIT 10;");
        
            while (result.next())
            {
                System.out.println("StuID: " + result.getString(1));
                System.out.println("Prefix: " + result.getString(2));
                System.out.println("FirstName: " + result.getString(3));
                System.out.println("LastName: " + result.getString(4));
                System.out.println("Gender: " + result.getString(5));
                System.out.println("CitizenshipStatus: " + result.getString(6));
                System.out.println("SchoolName: " + result.getString(7));
                System.out.println("SchoolCode: " + result.getString(8));
                System.out.println("MatricYear: " + result.getString(9).substring(0,4));
                System.out.println("ExaminingAuthority: " + result.getString(10));
                System.out.println("OldExAuth: " + result.getString(11));
                System.out.println("UCTScore: " + result.getString(12));
                System.out.println();
            }
        
            statement.close();    
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints university students and their courses.
     */
    public static void printUniStudentsCourses() //D
    {
        System.out.println("StuID\tCourse\tPercent\tSymbol\tCredits\tSenior\tScience");
        
        try
        {
            ResultSet result = runQuery("SELECT * FROM Uni;");
        
            String stuID;
            String course;
            String percent;
            String symbol;
            String credits;
            String senior;
            String science;
        
            while (result.next())
            {
                stuID = result.getString(1);
                course = result.getString(2);
                percent = result.getString(3);
                symbol = result.getString(4);
                credits = result.getString(5);
                senior = result.getString(6);
                science = result.getString(7);
            
                System.out.println(stuID+"\t"+course+"\t"+percent+"\t"+symbol+"\t"+credits+"\t"+senior+"\t"+science);
            }
        
            statement.close();   
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints univeristy students with the average for their courses and total obtained credits.
     */
    public static void printCourseAveragesAndTotalCredits() //E
    {
        System.out.println("StuID\tCourseAvg\tTotalCredits");
        
        try
        {
            ResultSet result = runQuery("SELECT CourseAvgTable.StuID, CourseAvg, TotalCredits FROM (SELECT StuID, ROUND(AVG(CAST(Percent AS UNSIGNED)),2) As CourseAvg FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) GROUP BY StuID) AS CourseAvgTable  LEFT JOIN (SELECT StuID, SUM(Credits) AS TotalCredits FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) AND (Symbol IN ('1','2+','2-','3','PA','UP','SP')) GROUP BY StuID) AS TotalCreditsTable ON CourseAvgTable.StuID = TotalCreditsTable.StuID;");
        
            String stuID;
            String courseAvg;
            String totalCredits;
        
            while (result.next())
            {
                stuID = result.getString(1);
                courseAvg = result.getString(2);
                totalCredits = result.getString(3);
            
                System.out.println(stuID+"\t"+courseAvg+"\t\t"+totalCredits);
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints courses or a specific subset of courses.
     * @param courseType Specified the type of courses where "A"=all, "B"=senior, "C"=science, "D"=junior, "E"=non-science, "F"=senior science, "G"=senior non-science, "H"=junior science, "I"=junior non-science. 
     */
    public static void printCourses(String courseType) //F
    {
        String query = "SELECT DISTINCT Course, Credits, Senior, Science FROM Uni";
        
        LinkedList<String> validCourseTypes = new LinkedList<String>();
        validCourseTypes.addAll(Arrays.asList("A","B","C","D","E","F","G","H","I"));
        if (!validCourseTypes.contains(courseType))
        {
            System.out.println("Your request was not found. Please re-try your query.");
            return;
        }
        
        if (courseType.equals("B")) //senior
            query = query + " WHERE Senior = 'Y'; ";
        else if (courseType.equals("C")) //science
            query = query + " WHERE Science = 'Y';";
        else if (courseType.equals("D")) //junior
            query = query + " WHERE Senior = 'N';";
        else if (courseType.equals("E")) //non-science
            query = query + " WHERE Science = 'N';";
        else if (courseType.equals("F")) //senior science
            query = query + " WHERE (Senior = 'Y') AND (Science = 'Y');";
        else if (courseType.equals("G")) //senior non-science
            query = query + " WHERE (Senior = 'Y') AND (Science = 'N');";
        else if (courseType.equals("H")) //junior science 
            query = query + " WHERE (Senior = 'N') AND (Science = 'Y');";
        else if (courseType.equals("I")) //junior non-science
            query = query + " WHERE (Senior = 'N') AND (Science = 'N');";
        else //all
            query = query + ";";
            
       System.out.println("Course\tCredits\tSenior\tScience");
       
       try
       { 
            ResultSet result = runQuery(query);
        
            String course;
            String credits;
            String senior;
            String science;
        
            while(result.next())
            {
                course = result.getString(1);
                credits = result.getString(2);
                senior = result.getString(3);
                science = result.getString(4);
            
                System.out.println(course+"\t"+credits+"\t"+senior+"\t"+science);    
            }
        
            statement.close();
        }
        catch(SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints university marking symbols.
     */
    public static void printSymbols() //G
    {
        System.out.println("Symbol");
        
        try
        {
            ResultSet result = runQuery("SELECT DISTINCT Symbol FROM Uni;");
            
            while(result.next())
            {
                System.out.println(result.getString(1));
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints top 10 course marks obtained by university students.
     */
    public static void printTop10CourseMarks() //H
    {
        System.out.println("StuID\tCourse\tPercent\tSymbol\tCredits\tSenior\tScience");
        
        try
        {
            ResultSet result = runQuery("SELECT * FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) ORDER BY Percent DESC LIMIT 10;");
        
            String stuID;
            String course;
            String percent;
            String symbol;
            String credits;
            String senior;
            String science;
        
            while (result.next())
            {
                stuID = result.getString(1);
                course = result.getString(2);
                percent = result.getString(3);
                symbol = result.getString(4);
                credits = result.getString(5);
                senior = result.getString(6);
                science = result.getString(7);
            
                System.out.println(stuID+"\t"+course+"\t"+percent+"\t"+symbol+"\t"+credits+"\t"+senior+"\t"+science);
            }
        
            statement.close();   
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints 10 course averages obtained by university students.
     */
    public static void printTop10CourseAverages() //I
    {
        System.out.println("StuID\tCourseAvg\tTotalCredits");
        
        try
        {
            ResultSet result = runQuery("SELECT CourseAvgTable.StuID, CourseAvg, TotalCredits FROM (SELECT StuID, ROUND(AVG(CAST(Percent AS UNSIGNED)),2) As CourseAvg FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) GROUP BY StuID) AS CourseAvgTable LEFT JOIN (SELECT StuID, SUM(Credits) AS TotalCredits FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) AND (Symbol IN ('1','2+','2-','3','PA','UP','SP')) GROUP BY StuID) AS TotalCreditsTable ON CourseAvgTable.StuID = TotalCreditsTable.StuID ORDER BY CourseAvg DESC LIMIT 10;");
        
            String stuID;
            String courseAvg;
            String totalCredits;
        
            while (result.next())
            {
                stuID = result.getString(1);
                courseAvg = result.getString(2);
                totalCredits = result.getString(3);
            
                System.out.println(stuID+"\t"+courseAvg+"\t\t"+totalCredits);
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints details of a specified matriculant.
     * @param stuID Specified matric strudent.
     */
    public static void printSpecifiedMatricStudent(String stuID) //J
    {
        try
        {
            int testNumeric = Integer.parseInt(stuID);
        }
        catch (NumberFormatException e)
        {
            System.out.println("Student ID should only contain digits.");
            return;
        }
        
        try
        {
            ResultSet result = runQuery("SELECT * FROM Matric WHERE StuID = '" + stuID + "';");
        
            while (result.next())
            {
                System.out.println("StuID: " + result.getString(1));
                System.out.println("Prefix: " + result.getString(2));
                System.out.println("FirstName: " + result.getString(3));
                System.out.println("LastName: " + result.getString(4));
                System.out.println("Gender: " + result.getString(5));
                System.out.println("CitizenshipStatus: " + result.getString(6));
                System.out.println("SchoolName: " + result.getString(7));
                System.out.println("SchoolCode: " + result.getString(8));
                System.out.println("MatricYear: " + result.getString(9).substring(0,4));
                System.out.println("ExaminingAuthority: " + result.getString(10));
                System.out.println("OldExAuth: " + result.getString(11));
                System.out.println("UCTScore: " + result.getString(12));
                System.out.println();
            }
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }    
    }
    
    /**
     * Prints details of the specified school.
     * @param schoolCode Specified school.
     */
    public static void printSpecifiedSchool(String schoolCode) //K
    {
        try
        {
            int testNumeric = Integer.parseInt(schoolCode);
        }
        catch (NumberFormatException e)
        {
            System.out.println("School Code should only contain digits.");
            return;
        }
        
        try
        {
            ResultSet result = runQuery("SELECT SchoolCode, SchoolName, ExaminingAuthority, OldExAuth FROM Matric WHERE SchoolCode = '" + schoolCode + "';");
        
            while (result.next())
            {
                System.out.println("SchoolCode: " + result.getString(1));
                System.out.println("SchoolName: " + result.getString(2));
                System.out.println("ExaminingAuthority: " + result.getString(3));
                System.out.println("OldExAuth: " + result.getString(4));
                System.out.println();
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints courses taken by the specified university student.
     * @param stuID Specified university student.
     */
    public static void printCoursesBySpecifiedUniStudent(String stuID) //L
    {
        try
        {
            int testNumeric = Integer.parseInt(stuID);
            System.out.println("StuID\tCourse\tPercent\tSymbol\tCredits\tSenior\tScience");
        }
        catch (NumberFormatException e)
        {
            System.out.println("Student ID should only contain digits.");
            return;
        }
        
        try
        {
            ResultSet result = runQuery("SELECT * FROM Uni WHERE StuID = '" + stuID + "';");
        
            String stuID2;
            String course;
            String percent;
            String symbol;
            String credits;
            String senior;
            String science;
        
            while (result.next())
            {
                stuID2 = result.getString(1);
                course = result.getString(2);
                percent = result.getString(3);
                symbol = result.getString(4);
                credits = result.getString(5);
                senior = result.getString(6);
                science = result.getString(7);
            
                System.out.println(stuID2+"\t"+course+"\t"+percent+"\t"+symbol+"\t"+credits+"\t"+senior+"\t"+science);
            }
        
            statement.close();   
        }
        catch(SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints course average and total obtained credits of specified university student.
     * @param stuID Specified University student.
     */
    public static void printCourseAvgOrTotalCreditOfSpecifiedUniStudent(String stuID) //M
    {  
        try
        {
            int testNumeric = Integer.parseInt(stuID);
            System.out.println("StuID\tCourseAvg\tTotalCredits");
        }
        catch (NumberFormatException e)
        {
            System.out.println("Student ID should only contain digits.");
            return;
        }
        
        try
        {
            ResultSet result = runQuery("SELECT CourseAvgTable.StuID, CourseAvg, TotalCredits FROM (SELECT StuID, ROUND(AVG(CAST(Percent AS UNSIGNED)),2) As CourseAvg FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) GROUP BY StuID) AS CourseAvgTable LEFT JOIN (SELECT StuID, SUM(Credits) AS TotalCredits FROM Uni WHERE (Percent NOT IN  ('AB','DPR')) AND (Symbol IN ('1','2+','2-','3','PA','UP','SP')) GROUP BY StuID) AS TotalCreditsTable ON CourseAvgTable.StuID = TotalCreditsTable.StuID WHERE CourseAvgTable.StuID = '" + stuID + "';");
        
            String stuID2;
            String courseAvg;
            String totalCredits;
        
            while (result.next())
            {
                stuID2 = result.getString(1);
                courseAvg = result.getString(2);
                totalCredits = result.getString(3);
            
                System.out.println(stuID2+"\t"+courseAvg+"\t\t"+totalCredits);
            }
        
            statement.close();
        }
        catch(SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Print university students taking specified course.
     * @param course Specified course.
     */
    public static void printStudentsTakingSpecifiedCourse(String course) //N
    {
        System.out.println("StuID");
        
        try
        {
            ResultSet result = runQuery("SELECT DISTINCT StuID FROM Uni WHERE Course = '" + course + "';");
        
            while (result.next())
            {
                System.out.println(result.getString(1));
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Prints details of specified course.
     * @param course Specified course.
     */
    public static void printSpecifiedCourse(String course) //O
    {
        System.out.println("Course\tCredits\tSenior\tScience");
        
        try
        {
            ResultSet result = runQuery("SELECT DISTINCT Course, Credits, Senior, Science FROM Uni WHERE Course = '" + course + "';");
        
            String course2;
            String credits;
            String senior;
            String science;
        
            while(result.next())
            {
                course2 = result.getString(1);
                credits = result.getString(2);
                senior = result.getString(3);
                science = result.getString(4);
            
                System.out.println(course2+"\t"+credits+"\t"+senior+"\t"+science);    
            }
        
            statement.close();
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Inserts a record / tuple into Matric table.
     * @param stuID StuID to insert.
     * @param prefix Prefix to insert.
     * @param firstName FirstName to insert.
     * @param lastName LastName to insert.
     * @param gender Gender to insert.
     * @param citizenshipStatus CitizenshipStatus to insert.
     * @param schoolName SchoolName to insert.
     * @param matricYear matricYear to insert.
     * @param examiningAuthority ExaminingAuthority to insert.
     * @param oldExAuth OldExAuth to insert.
     * @param uctScore UCTScore to insert.
     */
    public static void insertIntoMatric(String stuID, String prefix, String firstName, String lastName, String gender, String citizenshipStatus, String schoolName, String schoolCode, String matricYear, String examiningAuthority, String oldExAuth, String uctScore) //P
    {
        try
        {
            int rowsInserted = runUpdate("INSERT INTO Matric (StuID, Prefix, FirstName, LastName, Gender, CitizenshipStatus, SchoolName, SchoolCode, MatricYear, ExaminingAuthority, OldExAuth, UCTScore) VALUES('" + stuID + "', '" + prefix + "', '" + firstName + "', '" + lastName + "', '" + gender + "', '" + citizenshipStatus + "', '" + schoolName + "', '" + schoolCode + "', " + matricYear + ", '" + examiningAuthority + "', '" + oldExAuth + "', " + uctScore + ");");
            statement.close();
            
            if (rowsInserted==0)
                System.out.println("Unsuccessful Insertion.");
            else
                System.out.println(Integer.toString(rowsInserted) + " rows successfully inserted.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Inserts a record / tuple into Uni table.
     * @param stuID StuID to insert.
     * @param course Course to insert.
     * @param percent Percent to insert.
     * @param symbol Symbol to insert.
     * @param credits Credits to insert.
     * @param senior Senior to insert.
     * @param science Science to insert.
     */
    public static void insertIntoUni(String stuID, String course, String percent, String symbol, String credits, String senior, String science) //R
    {
        try
        {
            int rowsInserted = runUpdate("INSERT INTO Uni (StuID, Course, Percent, Symbol, Credits, Senior, Science) VALUES('" + stuID + "', '" + course + "', '" + percent + "', '" + symbol + "', " + credits + ", '" + senior + "', '" + science + "');");
            statement.close();
            
            if (rowsInserted==0)
                System.out.println("Unsuccessful Insertion.");
            else
                System.out.println(Integer.toString(rowsInserted) + " rows successfully inserted.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Delete record(s) from Matric table.
     * @param refField Reference field.
     * @param refValue Reference value.
     */
    public static void deleteFromMatric(String refField, String refValue) //S
    {   
        try
        {
            if ((!refField.equals("MatricYear")) && (!refField.equals("UCTScore"))) 
                refValue = "'" + refValue + "'";
            int rowsDeleted = runUpdate("DELETE FROM Matric WHERE " + refField + " = " + refValue + ";");
            statement.close();
            
            System.out.println(Integer.toString(rowsDeleted) + " rows deleted.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Delete record(s) from Uni table.
     * @param refField1 Reference field.
     * @param refValue1 Reference value.
     * @param refField2 Reference field.
     * @param refValue2 Reference value.
     */
    public static void deleteFromUni(String refField1, String refValue1, String refField2, String refValue2) //T
    {
        try
        {
            if (!refField1.equals("Credits"))
                 refValue1 = "'" + refValue1 + "'";
            if (!refField2.equals("Credits"))
                refValue2 = "'" + refValue2 + "'";
            int rowsDeleted = runUpdate("DELETE FROM Uni WHERE (" + refField1 + " = " + refValue1 + ") AND (" + refField2 + " = " + refValue2 + ");");
            statement.close();
            
            System.out.println(Integer.toString(rowsDeleted) + " rows deleted.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Update record(s) in Matric table.
     * @param updateField Field to update.
     * @param updateValue Updated value.
     * @param refField Reference field.
     * @param refValue Reference value.
     */
    public static void updateMatric(String updateField, String updateValue, String refField, String refValue) //U
    {
        try
        {
            if ((!updateField.equals("MatricYear")) && (!updateField.equals("UCTScore"))) 
                updateValue = "'" + updateValue + "'";
            if ((!refField.equals("MatricYear")) && (!refField.equals("UCTScore"))) 
                refValue = "'" + refValue + "'";
            int rowsUpdated = runUpdate("UPDATE Matric SET " + updateField + " = " + updateValue + " WHERE " + refField + " = " + refValue + ";");
            statement.close();
            
            System.out.println(Integer.toString(rowsUpdated) + " rows updated.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Update record(s) in Matric table.
     * @param updateField Field to update.
     * @param updateValue Updated value.
     * @param refField1 Reference field.
     * @param refValue1 Reference value.
     * @param refField2 Reference field.
     * @param refValue2 Reference value.
     */
    public static void updateUni(String updateField, String updateValue, String refField1, String refValue1, String refField2, String refValue2) //V
    {
        try
        {
            if (!updateField.equals("Credits")) 
                updateValue = "'" + updateValue + "'";
            if (!refField1.equals("Credits")) 
                refValue1 = "'" + refValue1 + "'";
            if (!refField2.equals("Credits")) 
                refValue2 = "'" + refValue2 + "'";
            int rowsUpdated = runUpdate("UPDATE Uni SET " + updateField + " = " + updateValue + " WHERE (" + refField1 + " = " + refValue1 + ") AND (" + refField2 + " = " + refValue2 + ");");
            statement.close();
            
            System.out.println(Integer.toString(rowsUpdated) + " rows updated.");
        }
        catch (SQLException se)
        {
            se.printStackTrace();
        }
    }
    
    /**
     * Main method provides a text interface for user to access data from database.
     * @param args n/a to program.
     */
    public static void main(String [] args)
    {
        try
        {
            try
            {
                Class.forName(DRIVER);
            }
            catch (ClassNotFoundException e)
            {
                System.out.println(e);
            }
            
            connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            
	    runQuery("SET SQL_SAFE_UPDATES=0");

            System.out.println();
            
            Scanner input = new Scanner(System.in);
            
            System.out.println("Select an option by entering letter:");
            System.out.println("A. Display matric students.");
            System.out.println("B. Display schools");
            System.out.println("C. Display students with top 10 UCTScores");
            System.out.println("D. Display univeristy students with their courses.");
            System.out.println("E. Display university students, their course average and total credits.");
            System.out.println("F. Display university courses.");
            System.out.println("G. Display university mark symbols.");
            System.out.println("H. Display students and courses with top 10 course percentages.");
            System.out.println("I. Display students with top 10 course averages.");
            System.out.println("J. Search for specified matric student.");
            System.out.println("K. Search for specified school.");
            System.out.println("L. Search for courses taken by specified university student.");
            System.out.println("M. Search for course average / total credits of specfied university student.");
            System.out.println("N. Search for students taking specified course.");
            System.out.println("O. Search for details of specified course.");
            System.out.println("P. Insert new record into Matric table.");
            System.out.println("R. Insert new record into University table.");
            System.out.println("S. Delete existing record(s) in Matric table.");
            System.out.println("T. Delete existing record(s) in University table.");
            System.out.println("U. Update existing record(s) in Matric table.");
            System.out.println("V. Update existing record(s) in University table.");
            System.out.println("Q. Quit.");
            System.out.println();
                
            String option = input.nextLine().toUpperCase();

	    while (!option.equals("Q"))
            {
                String stuID = "";
                String schoolCode = "";
                String course = "";
                String courseType = "";
                String refField1 = "";
                String refVal1 = "";
                String updateField = "";
                String updateVal = "";
                String refField2 = "";
                String refVal2 = "";         
                String[] insertSet;
                String[] fieldValuePair;
                
                System.out.println();                
                
                if (option.equals("A"))
                    printMatricStudents();
                
                else if (option.equals("B"))
                    printSchools();
                
                else if (option.equals("C"))
                    printTop10UCTScores();
                    
                else if (option.equals("D"))
                    printUniStudentsCourses();
                    
                else if (option.equals("E"))
                    printCourseAveragesAndTotalCredits();
                    
                else if (option.equals("F"))
                {
                    System.out.println("Select the type of course you would like?");
                    System.out.println("A. All");
                    System.out.println("B. Senior");
                    System.out.println("C. Science");
                    System.out.println("D. Junior");
                    System.out.println("E. Non-Science");
                    System.out.println("F. Senior Science");
                    System.out.println("G. Senior Non-Science");
                    System.out.println("H. Junior Science");
                    System.out.println("I. Junior Non-Science");
                    courseType = input.nextLine().toUpperCase();
                    System.out.println();

                    printCourses(courseType);
                }
                
                else if (option.equals("G"))
		    printSymbols();

		else if (option.equals("H"))
                {
                    printTop10CourseMarks();
                }
                
                else if (option.equals("I"))
                {
                    printTop10CourseAverages();
                }
                
                else if (option.equals("J"))
                {
                    System.out.println("StuID:");
                    stuID = input.nextLine();
                    
                    printSpecifiedMatricStudent(stuID);
                }
                
                else if (option.equals("K"))
                {
                    System.out.println("SchoolCode:");
                    schoolCode = input.nextLine();
 		    System.out.println();
                    
                    printSpecifiedSchool(schoolCode);
                }
                
                else if (option.equals("L"))
                {
                    System.out.println("StuID:");
                    stuID = input.nextLine();
		    System.out.println();
                    
                    printCoursesBySpecifiedUniStudent(stuID);
                }
                
                else if (option.equals("M"))
                {
                    System.out.println("StuID:");
                    stuID = input.nextLine();
                    System.out.println();

                    printCourseAvgOrTotalCreditOfSpecifiedUniStudent(stuID);
                }
                
                else if (option.equals("N"))
                {
                    System.out.println("Course:");
                    course = input.nextLine();
                    System.out.println();

                    printStudentsTakingSpecifiedCourse(course);
                }
                
                else if (option.equals("O"))
                {
                    System.out.println("Course:");
                    course = input.nextLine();
                    System.out.println();

                    printSpecifiedCourse(course);
                }
                
                else if (option.equals("P"))
                {
                    System.out.println("Enter values as follows (denote null/empty values with -, e.g. ,-,):");
                    System.out.println("StuID,Prefix,FirstName,LastName,Gender,CitizenshipStatus,SchoolName,SchoolCode,Year,ExaminingAuthority,OldExAuth,UCTScore");
                    insertSet = input.nextLine().split(",");
                    System.out.println();
                    
                    for (int i=0;i<insertSet.length;i++)
                    {
                        insertSet[i]=insertSet[i].replaceAll("-","");
                    }
                    
                    if (insertSet[11].equals(""))
                        insertSet[11] = "0";
                     
                    insertIntoMatric(insertSet[0], insertSet[1], insertSet[2], insertSet[3], insertSet[4], insertSet[5], insertSet[6], insertSet[7], insertSet[8], insertSet[9], insertSet[10], insertSet[11]);   
                }
                
                else if (option.equals("R"))
                {
                    System.out.println("Enter values as follows (denout null/empty values with -, e.g., -,):");
                    System.out.println("StuID,Course,Percent,Symbol,Credits,Senior,Science");
                    insertSet = input.nextLine().split(",");
                    System.out.println();
                    
                    for (int i=0;i<insertSet.length;i++)
                    {
                        insertSet[i] = insertSet[i].replaceAll("-","");
                    }
                    
                    if (insertSet[4].equals(""))
                        insertSet[4]="0";
                    
                    insertIntoUni(insertSet[0], insertSet[1], insertSet[2], insertSet[3], insertSet[4], insertSet[5], insertSet[6]);
                }
                
                else if (option.equals("S"))
                {
                    System.out.println("Enter reference field and value as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Prefix, FirstName, LastName, Gender, CitizenshipStatus, SchoolName, SchoolCode, Year, ExaminingAuthority, OldExAuth, UCTScore,");
                    fieldValuePair = input.nextLine().split(":");
                    System.out.println();

                    deleteFromMatric(fieldValuePair[0], fieldValuePair[1]);
                }
                
                else if (option.equals("T"))
                {
                    System.out.println("Enter reference field and value as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Course, Percent, Symbol, Credits, Senior, Science");
                    fieldValuePair = input.nextLine().split(":");
                    refField1 = fieldValuePair[0];
                    refVal1 = fieldValuePair[1];
                    System.out.println();

                    System.out.println("Additional constraint: Enter second reference field and value (if unnecessary, re-enter previous input) as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Course, Percent, Symbol, Credits, Senior, Science");
                    fieldValuePair = input.nextLine().split(":");
                    refField2 = fieldValuePair[0];
                    refVal2 = fieldValuePair[1];
                    System.out.println();
                    
		    deleteFromUni(refField1, refVal1, refField2, refVal2);  
                }
                
                else if (option.equals("U"))
                {
                    System.out.println("Enter field to update and the updated value as follows:");
                    System.out.println("UpdateField:UpdateValue");
                    System.out.println("Update field can be StuID, Prefix, FirstName, LastName, Gender, CitizenshipStatus, SchoolName, SchoolCode, Year, ExaminingAuthority, OldExAuth, UCTScore");
                    fieldValuePair = input.nextLine().split(":");
                    updateField = fieldValuePair[0];
                    updateVal = fieldValuePair[1];
                    System.out.println();

                    System.out.println("Enter reference field and value as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Prefix, FirstName, LastName, Gender, CitizenshipStatus, SchoolName, SchoolCode, Year, ExaminingAuthority, OldExAuth, UCTScore");
                    fieldValuePair = input.nextLine().split(":");
                    refField1 = fieldValuePair[0];
                    refVal1 = fieldValuePair[1];
                    System.out.println();

                    updateMatric(updateField, updateVal, refField1, refVal1);
                }
                
                else if (option.equals("V"))
                {
                    System.out.println("Enter field to update and the updated values as follows:");
                    System.out.println("UpdateField:UpdateValue");
                    System.out.println("Update field can be StuID, Course, Percent, Symbol, Credits, Senior, Science");
                    fieldValuePair = input.nextLine().split(":");
                    updateField = fieldValuePair[0];
                    updateVal = fieldValuePair[1];
                    System.out.println();

                    System.out.println("Enter reference field and value as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Course, Percent, Symbol, Credits, Senior, Science");
                    fieldValuePair = input.nextLine().split(":");
                    refField1 = fieldValuePair[0];
                    refVal1 = fieldValuePair[1];
                    System.out.println();

                    System.out.println("Additional constraint: Enter second reference field and value (if unnecessary, re-enter previous input) as follows:");
                    System.out.println("ReferenceField:ReferenceValue");
                    System.out.println("Reference Field can be StuID, Course, Percent, Symbol, Credits, Senior, Science");
                    fieldValuePair = input.nextLine().split(":");
                    refField2 = fieldValuePair[0];
                    refVal2 = fieldValuePair[1];
                    System.out.println();

                    updateUni(updateField, updateVal, refField1, refVal1, refField2, refVal2);
                }

                System.out.println();
                System.out.println();
                
		System.out.println("Select an option by entering letter:");
                System.out.println("A. Display matric students.");
                System.out.println("B. Display schools");
                System.out.println("C. Display students with top 10 UCTScores");
                System.out.println("D. Display univeristy students with their courses.");
                System.out.println("E. Display university students, their course average and total credits.");
                System.out.println("F. Display university courses.");
                System.out.println("G. Display university mark symbols.");
                System.out.println("H. Display students and courses with top 10 course percentages.");
                System.out.println("I. Display students with top 10 course averages.");
                System.out.println("J. Search for specified matric student.");
                System.out.println("K. Search for specified school.");
                System.out.println("L. Search for courses taken by specified university student.");
                System.out.println("M. Search for course average / total credits of specfied university student.");
                System.out.println("N. Search for students taking specified course.");
                System.out.println("O. Search for details of specified course.");
                System.out.println("P. Insert new record into Matric table.");
                System.out.println("R. Insert new record into University table.");
                System.out.println("S. Delete existing record(s) in Matric table.");
                System.out.println("T. Delete existing record(s) in University table.");
                System.out.println("U. Update existing record(s) in Matric table.");
                System.out.println("V. Update existing record(s) in University table.");
                System.out.println("Q. Quit.");
                System.out.println();
                
                option = input.nextLine().toUpperCase();
	        }
        }
        catch(SQLException se)
        {
            se.printStackTrace();
        }
        
        finally
        {
            try
            {
                if (connection != null)
                    connection.close();
            }
            catch (SQLException se)
            {
                se.printStackTrace();
            }    
        }
    }
}
